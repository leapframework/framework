<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- 
	This xml is a modified copy of spring-beans-3.2.xsd from the spring framework under Apache License 2.0.
-->
<xsd:schema xmlns="http://www.leapframework.org/schema/beans" 
            xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
            targetNamespace="http://www.leapframework.org/schema/beans">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />

    <!-- base types -->
    <xsd:complexType name="identifiedType" abstract="true">
        <xsd:attribute name="id" type="xsd:string"/>
    </xsd:complexType>

    <xsd:group name="rootElements">
        <xsd:sequence>
            <xsd:element ref="description" minOccurs="0"/>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="import"/>
                <xsd:element ref="if"/>
                <xsd:element ref="if-not"/>
                <xsd:element ref="alias"/>
                <xsd:element ref="init"/>
                <xsd:element ref="remove-bean"/>
                <xsd:element ref="bean"/>
                <xsd:element ref="beans"/>
                <xsd:element ref="bean-proxy"/>
                <xsd:element ref="bean-list"/>
                <xsd:element ref="util-list"/>
                <xsd:element ref="util-set"/>
                <xsd:element ref="util-map"/>
                <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
            </xsd:choice>
        </xsd:sequence>
    </xsd:group>

	<!-- Top-level <beans> tag -->
	<xsd:element name="beans">
		<xsd:complexType>
            <xsd:group ref="rootElements"/>
			<xsd:attribute name="default-lazy-init" default="true" type="xsd:boolean"/>
            <xsd:attributeGroup ref="ifAttributesWithPrefix"/>
			<xsd:anyAttribute namespace="##other" processContents="lax"/>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="description">
		<xsd:complexType mixed="true">
			<xsd:choice minOccurs="0" maxOccurs="unbounded"/>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="import">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:restriction base="xsd:anyType">
					<xsd:attribute name="resource" type="xsd:string" use="required"/>
                    <xsd:attribute name="check-existence" type="xsd:boolean"/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
    
	<xsd:element name="alias">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:restriction base="xsd:anyType">
					<xsd:attribute name="id" type="xsd:string"/>
					<xsd:attribute name="type" type="xsd:string"/>
					<xsd:attribute name="name" type="xsd:string"/>
					<xsd:attribute name="alias" type="xsd:string" use="required"/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
    
	<xsd:group name="beanElements">
		<xsd:sequence>
			<xsd:element ref="description" minOccurs="0"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="factory"/>
                <xsd:element ref="additional-type-def"/>
                <xsd:element ref="register-bean-factory"/>
				<xsd:element ref="constructor-arg"/>
				<xsd:element ref="property"/>
				<xsd:element ref="qualifier"/>
				<xsd:element ref="invoke"/>
				<xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:choice>
		</xsd:sequence>
	</xsd:group>

	<xsd:attributeGroup name="beanAttributes">
        <xsd:attribute name="qualifier" type="xsd:string"/>
        <xsd:attribute name="name" type="xsd:string"/>
	    <xsd:attribute name="type" type="xsd:string"/>
	    <xsd:attribute name="class" type="xsd:string"/>
	    <xsd:attribute name="singleton" type="xsd:boolean"/>
	    <xsd:attribute name="lazy-init" type="xsd:boolean" default="true"/>
	    <xsd:attribute name="primary" type="xsd:boolean" use="optional"/>
        <xsd:attribute name="override" type="xsd:boolean" use="optional" default="false"/>
		<xsd:attribute name="override-annotation" type="xsd:boolean" use="optional" default="false"/>
        <xsd:attribute name="default-override" type="xsd:boolean" use="optional" default="false"/>
	    <xsd:attribute name="init-method" type="xsd:string"/>
        <xsd:attribute name="destroy-method" type="xsd:string"/>
        <xsd:attribute name="sort-order" type="xsd:float" default="100"/>
        <xsd:attribute name="export-mbean" type="xsd:boolean" default="false"/>
        <xsd:attribute name="mbean-name" type="xsd:string"/>
	    <xsd:anyAttribute namespace="##other" processContents="lax" />
	</xsd:attributeGroup>

    <xsd:attributeGroup name="ifAttributes">
        <xsd:attribute name="profile"               type="xsd:string"  use="optional"/>
        <xsd:attribute name="property"              type="xsd:string"  use="optional"/>
        <xsd:attribute name="expr"                  type="xsd:string"  use="optional"/>
        <xsd:attribute name="class-present"         type="xsd:string"  use="optional"/>
        <xsd:attribute name="servlet-environment"   type="xsd:boolean" use="optional"/>
    </xsd:attributeGroup>

    <xsd:attributeGroup name="ifAttributesWithPrefix">
        <xsd:attribute name="if-profile"               type="xsd:string"  use="optional"/>
        <xsd:attribute name="if-property"              type="xsd:string"  use="optional"/>
        <xsd:attribute name="if"                       type="xsd:string"  use="optional">
            <xsd:annotation>
                <xsd:documentation><![CDATA[If expression.]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="if-class-present"         type="xsd:string"  use="optional"/>
        <xsd:attribute name="if-servlet-environment"   type="xsd:boolean" use="optional"/>
    </xsd:attributeGroup>

    <xsd:element name="if">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
                If condition.
            ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:group          ref="rootElements"/>
            <xsd:attributeGroup ref="ifAttributes" />
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="if-not">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
                If not condition.
            ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:group          ref="rootElements"/>
            <xsd:attributeGroup ref="ifAttributes" />
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="init">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
                Defines a class to init static.
            ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="class"       type="xsd:string" use="required"></xsd:attribute>
            <xsd:attribute name="init-method" type="xsd:string" use="optional"/>
            <xsd:attributeGroup ref="ifAttributesWithPrefix"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="remove-bean">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
                Removes a bean.
            ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="id"      type="xsd:string"  use="optional"/>
            <xsd:attribute name="name"    type="xsd:string"  use="optional"/>
            <xsd:attribute name="type"    type="xsd:string"  use="optional"/>
            <xsd:attribute name="class"   type="xsd:string"  use="optional"/>
            <xsd:attribute name="primary" type="xsd:boolean" use="optional"/>
            <xsd:attributeGroup ref="ifAttributesWithPrefix"/>
        </xsd:complexType>
    </xsd:element>
    
	<xsd:element name="bean">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="identifiedType">
					<xsd:group ref="beanElements" />
					<xsd:attributeGroup ref="beanAttributes" />
                    <xsd:attributeGroup ref="ifAttributesWithPrefix"/>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

    <xsd:element name="bean-proxy">
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="identifiedType">
                    <xsd:choice minOccurs="0" maxOccurs="unbounded">
                        <xsd:element ref="constructor-arg"/>
                        <xsd:element ref="property"/>
                        <xsd:element ref="invoke"/>
                    </xsd:choice>
                    <xsd:attribute name="proxy-class" type="xsd:string"/>
                    <xsd:attribute name="target-type" use="required"/>
                    <xsd:attribute name="target-primary" type="xsd:boolean" use="optional"/>
                    <xsd:attribute name="target-name" use="optional"/>
                    <xsd:attribute name="target-id" use="optional"/>
                    <xsd:attribute name="override" type="xsd:boolean" use="optional" default="false"/>
                    <xsd:attribute name="default-override" type="xsd:boolean" use="optional" default="false"/>
                    <xsd:attributeGroup ref="ifAttributesWithPrefix"/>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

	<xsd:element name="constructor-arg" type="argumentType"/>
	<xsd:element name="additional-type-def" type="typeDefType"/>
	<xsd:element name="register-bean-factory" type="factoryDefType"/>
	
	<xsd:element name="method-arg" type="argumentType"/>
	
	<xsd:complexType name="argumentType">
		<xsd:sequence>
			<xsd:element ref="description" minOccurs="0"/>
			<xsd:choice minOccurs="0" maxOccurs="1">
				<xsd:element ref="bean"/>
				<xsd:element ref="ref"/>
				<xsd:element ref="value"/>
				<xsd:element ref="class"/>
				<xsd:element ref="null"/>
				<xsd:element ref="array"/>
				<xsd:element ref="list"/>
				<xsd:element ref="set"/>
				<xsd:element ref="map"/>
				<xsd:element ref="props"/>
				<xsd:any namespace="##other" processContents="strict"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string"/>
		<xsd:attribute name="type" type="xsd:string"/>
        <xsd:attribute name="ref-id"   type="xsd:string"/>
        <xsd:attribute name="ref-type" type="xsd:string"/>
        <xsd:attribute name="ref-name" type="xsd:string"/>
        <xsd:attribute name="value" type="xsd:string"/>
        <xsd:attribute name="default-value" type="xsd:string"/>
	</xsd:complexType>	

	<xsd:element name="property" type="propertyType"/>

	<xsd:element name="qualifier">
		<xsd:complexType>
			<xsd:attribute name="value" type="xsd:string"/>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="ref">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:restriction base="xsd:anyType">
					<xsd:attribute name="id"   type="xsd:string"/>
					<xsd:attribute name="type" type="xsd:string"/>
					<xsd:attribute name="name" type="xsd:string"/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="value">
		<xsd:complexType mixed="true">
			<xsd:choice minOccurs="0" maxOccurs="unbounded"/>
			<xsd:attribute name="type" type="xsd:string"/>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="class">
		<xsd:complexType mixed="true">
			<xsd:choice minOccurs="0" maxOccurs="unbounded"/>
			<xsd:attribute name="type" type="xsd:string"/>
		</xsd:complexType>
	</xsd:element>	

	<xsd:element name="null">
		<xsd:complexType mixed="true">
			<xsd:choice minOccurs="0" maxOccurs="unbounded"/>
		</xsd:complexType>
	</xsd:element>

	<!-- Collection Elements -->
	<xsd:group name="collectionElements">
		<xsd:sequence>
			<xsd:element ref="description" minOccurs="0"/>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element ref="bean"/>
				<xsd:element ref="ref"/>
				<xsd:element ref="value"/>
				<xsd:element ref="class"/>
				<xsd:element ref="null"/>
				<xsd:element ref="array"/>
				<xsd:element ref="list"/>
				<xsd:element ref="set"/>
				<xsd:element ref="map"/>
				<xsd:element ref="props"/>
				<xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:choice>
		</xsd:sequence>
	</xsd:group>

	<xsd:element name="array">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="listOrSetType">
					<xsd:attribute name="merge" default="false" type="xsd:boolean"/>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="list">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="listOrSetType">
					<xsd:attribute name="merge" default="false" type="xsd:boolean"/>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="set">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="listOrSetType">
					<xsd:attribute name="merge" default="false" type="xsd:boolean"/>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="map">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="baseMapType">
					<xsd:attribute name="merge" default="false" type="xsd:boolean"/>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="entry" type="entryType"/>

	<xsd:element name="props">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="propsType">
					<xsd:attribute name="merge" default="false" type="xsd:boolean"/>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="key">
		<xsd:complexType>
			<xsd:group ref="collectionElements"/>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="prop">
		<xsd:complexType mixed="true">
			<xsd:choice minOccurs="0" maxOccurs="unbounded"/>
			<xsd:attribute name="key" type="xsd:string" use="required"/>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="bean-list">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:restriction base="xsd:anyType">
					<xsd:choice minOccurs="0" maxOccurs="unbounded">
						<xsd:element ref="bean" />
						<xsd:element ref="ref" />
					</xsd:choice>
					<xsd:attribute name="type" type="xsd:string" use="required" />
					<xsd:attribute name="qualifier" type="xsd:string" />
					<xsd:attribute name="override" type="xsd:boolean"/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="util-list">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="listOrSetType">
					<xsd:attribute name="id" type="xsd:string"/>
					<xsd:attribute name="list-class" type="xsd:string"/>
					<xsd:attribute name="singleton" type="xsd:boolean"/>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="util-set">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="listOrSetType">
					<xsd:attribute name="id" type="xsd:string"/>
					<xsd:attribute name="set-class" type="xsd:string"/>
					<xsd:attribute name="singleton" type="xsd:boolean"/>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="util-map">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="baseMapType">
					<xsd:attribute name="id" type="xsd:string"/>
					<xsd:attribute name="map-class" type="xsd:string"/>
					<xsd:attribute name="singleton" type="xsd:boolean"/>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>			
	
	<xsd:element name="invoke" type="invokeType"/>
	
	<xsd:complexType name="invokeType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element ref="method-arg"/>
				<xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="method" type="xsd:string" use="required"/>
	</xsd:complexType>

    <xsd:element name="factory" type="factoryType"/>

    <xsd:complexType name="factoryType">
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="method-arg"/>
                <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="class"  type="xsd:string" use="optional"/>
        <xsd:attribute name="method" type="xsd:string" use="optional"/>
    </xsd:complexType>
	
	<xsd:complexType name="typeDefType">
		<xsd:attribute name="type" type="xsd:string" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="optional"/>
		<xsd:attribute name="primary" type="xsd:boolean" use="optional"/>
        <xsd:attribute name="override" type="xsd:boolean" use="optional"/>
	</xsd:complexType>

	<xsd:complexType name="factoryDefType">
		<xsd:attribute name="target-type" type="xsd:string" use="required" />
	</xsd:complexType>

	<xsd:complexType name="propertyType">
		<xsd:sequence>
			<xsd:element ref="description" minOccurs="0" />
			<xsd:choice minOccurs="0" maxOccurs="1">
				<xsd:element ref="bean" />
				<xsd:element ref="ref" />
				<xsd:element ref="value" />
				<xsd:element ref="null" />
				<xsd:element ref="array" />
				<xsd:element ref="list"/>
				<xsd:element ref="set"/>
				<xsd:element ref="map"/>
				<xsd:element ref="props" />
				<xsd:any namespace="##other" processContents="strict" />
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="ref-id"   type="xsd:string"/>
		<xsd:attribute name="ref-type" type="xsd:string"/>
		<xsd:attribute name="ref-name" type="xsd:string"/>
		<xsd:attribute name="value" type="xsd:string"/>
		<xsd:attribute name="default-value" type="xsd:string"/>
        <xsd:attributeGroup ref="ifAttributesWithPrefix"/>
	</xsd:complexType>

	<!-- Collection Types -->

	<!-- base type for collections that have (possibly) typed nested values -->
	<xsd:complexType name="collectionType">
		<xsd:attribute name="value-type" type="xsd:string"/>
	</xsd:complexType>

	<!-- 'list' and 'set' collection type -->
	<xsd:complexType name="listOrSetType">
		<xsd:complexContent>
			<xsd:extension base="collectionType">
				<xsd:group ref="collectionElements"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 'map' element type -->
	<xsd:complexType name="baseMapType">
		<xsd:complexContent>
			<xsd:extension base="collectionType">
				<xsd:sequence>
					<xsd:element ref="description" minOccurs="0"/>
					<xsd:choice minOccurs="0" maxOccurs="unbounded">
						<xsd:element ref="entry"/>
					</xsd:choice>
				</xsd:sequence>
				<xsd:attribute name="key-type" type="xsd:string"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 'entry' element type -->
	<xsd:complexType name="entryType">
		<xsd:sequence>
			<xsd:element ref="key" minOccurs="0"/>
			<xsd:group ref="collectionElements"/>
		</xsd:sequence>
		<xsd:attribute name="key" type="xsd:string"/>
		<xsd:attribute name="key-ref" type="xsd:string"/>
		<xsd:attribute name="value" type="xsd:string"/>
		<xsd:attribute name="value-ref" type="xsd:string"/>
		<xsd:attribute name="value-type" type="xsd:string"/>
	</xsd:complexType>

	<!-- 'props' collection type -->
	<xsd:complexType name="propsType">
		<xsd:complexContent>
			<xsd:extension base="collectionType">
				<xsd:sequence>
					<xsd:choice minOccurs="0" maxOccurs="unbounded">
						<xsd:element ref="prop"/>
					</xsd:choice>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
</xsd:schema>